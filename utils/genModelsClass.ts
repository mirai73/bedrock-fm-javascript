import {
  BedrockClient,
  ListFoundationModelsCommand,
} from "@aws-sdk/client-bedrock";

const clientWest = new BedrockClient({ region: "us-west-2" });
const clientEast = new BedrockClient({ region: "us-east-1" });

const template = `// This files has been autogenerated - do not modify

export class Models {
{placeholderText}
}

export class ImageModels {
{placeholderImage}
}`;

async function getModels(
  client: BedrockClient,
  modality: "TEXT" | "IMAGE"
): Promise<(string | undefined)[]> {
  const resp = await client.send(
    new ListFoundationModelsCommand({
      byInferenceType: "ON_DEMAND",
      byOutputModality: modality,
    })
  );
  return resp.modelSummaries?.map((ms) => ms.modelId) ?? [];
}

(async () => {
  let output = template;
  try {
    const textModelsWest = await getModels(clientWest, "TEXT");

    const imageModelsWest = await getModels(clientWest, "IMAGE");

    const textModelsEast = await getModels(clientEast, "TEXT");

    const imageModelsEast = await getModels(clientEast, "IMAGE");
    //console.log("J", textModels, textModels);
    const textModels = [
      ...new Set([...textModelsEast, ...textModelsWest]).values(),
    ];
    const imageModels = [
      ...new Set([...imageModelsEast, ...imageModelsWest]).values(),
    ];

    const textModelStrings = textModels?.map(
      (m) =>
        `  public static readonly ${m?.replace(/\-/g, "_").replace(/\./g, "_").replace(/\:/g, "_").toUpperCase()} = "${m}";`
    );
    const imageModelStrings = imageModels?.map(
      (m) =>
        `  public static readonly ${m?.replace(/\-/g, "_").replace(/\./g, "_").replace(/\:/g, "_").toUpperCase()} = "${m}";`
    );
    if (textModelStrings) {
      output = output.replace("{placeholderText}", textModelStrings.join("\n"));
    }
    if (imageModelStrings) {
      output = output.replace(
        "{placeholderImage}",
        imageModelStrings.join("\n")
      );
    }
  } catch {}

  console.log(output);
})();
