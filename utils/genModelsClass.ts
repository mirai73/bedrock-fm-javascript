import {
  BedrockClient,
  ListFoundationModelsCommand,
} from "@aws-sdk/client-bedrock";

const clientWest = new BedrockClient({ region: "us-west-2" });
const clientEast = new BedrockClient({ region: "us-east-1" });

const template = `// This files has been autogenerated - do not modify

export class Models {
{placeholderText}
}

export class ImageModels {
{placeholderImage}
}

export class VideoModels {
{placeholderVideo}
}`;

async function getModels(
  client: BedrockClient,
): Promise<[string | undefined, string | undefined, string[] | undefined][]> {
  const resp = await client.send(new ListFoundationModelsCommand());
  return (
    resp.modelSummaries
      ?.filter(
        (ms) =>
          ms.inferenceTypesSupported?.includes("ON_DEMAND") ||
          //@ts-ignore
          ms.inferenceTypesSupported?.includes("INFERENCE_PROFILE"),
      )
      .map((ms) => [
        ms.modelId,
        ms.modelLifecycle?.status?.toString(),
        ms.outputModalities,
      ]) ?? []
  );
}

(async () => {
  let output = template;
  try {
    const allModelsWest = await getModels(clientWest);

    const textModelsWest = allModelsWest.filter((m) => m[2]?.includes("TEXT"));

    const imageModelsWest = allModelsWest.filter((m) =>
      m[2]?.includes("IMAGE"),
    );
    const videoModelsWest = allModelsWest.filter((m) =>
      m[2]?.includes("VIDEO"),
    );

    const allModelsEast = await getModels(clientEast);
    const textModelsEast = allModelsEast.filter((m) => m[2]?.includes("TEXT"));

    const imageModelsEast = allModelsEast.filter((m) =>
      m[2]?.includes("IMAGE"),
    );
    const videoModelsEast = allModelsEast.filter((m) =>
      m[2]?.includes("VIDEO"),
    );

    //console.log("J", textModels, textModels);
    const textModels = [
      ...new Set([
        ...textModelsEast.map((m) => JSON.stringify(m)),
        ...textModelsWest.map((m) => JSON.stringify(m)),
      ]).values(),
    ].map((x) => JSON.parse(x));
    const imageModels = [
      ...new Set([
        ...imageModelsEast.map((m) => JSON.stringify(m)),
        ...imageModelsWest.map((m) => JSON.stringify(m)),
      ]).values(),
    ].map((x) => JSON.parse(x));
    const videoModels = [
      ...new Set([
        ...videoModelsEast.map((m) => JSON.stringify(m)),
        ...videoModelsWest.map((m) => JSON.stringify(m)),
      ]).values(),
    ].map((x) => JSON.parse(x));

    const textModelStrings = textModels?.map(
      (m) =>
        `  ${m[1] !== "ACTIVE" ? "/** @deprecated this model has reached end-of-life */\n  " : ""}public static readonly ${m[0]?.replace(/\-/g, "_").replace(/\./g, "_").replace(/\:/g, "_").toUpperCase()} = "${m[0]}";`,
    );
    const imageModelStrings = imageModels?.map(
      (m) =>
        `  ${m[1] !== "ACTIVE" ? "/** @deprecated this model has reached end-of-life */\n  " : ""}public static readonly ${m[0]?.replace(/\-/g, "_").replace(/\./g, "_").replace(/\:/g, "_").toUpperCase()} = "${m[0]}";`,
    );

    const videoModelStrings = videoModels?.map(
      (m) =>
        `  ${m[1] !== "ACTIVE" ? "/** @deprecated this model has reached end-of-life */\n  " : ""}public static readonly ${m[0]?.replace(/\-/g, "_").replace(/\./g, "_").replace(/\:/g, "_").toUpperCase()} = "${m[0]}";`,
    );
    if (textModelStrings) {
      output = output.replace("{placeholderText}", textModelStrings.join("\n"));
    }
    if (imageModelStrings) {
      output = output.replace(
        "{placeholderImage}",
        imageModelStrings.join("\n"),
      );
    }

    if (videoModelStrings) {
      output = output.replace(
        "{placeholderVideo}",
        videoModelStrings.join("\n"),
      );
    }
  } catch {}

  console.log(output);
})();
